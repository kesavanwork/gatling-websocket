
apply plugin: 'scala'


dependencies {
    compile 'org.scala-lang:scala-library:2.11.8'
    compile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.5'
    compile 'com.google.guava:guava:18.0'
    compile 'org.yaml:snakeyaml:1.19'
}

configurations {
    gatling
}

//sourceSet{
//    simulations {
//        scala {
//            srcDirs = ['simulations/load']
//        }
//        resources {
//            srcDirs = ['simulations/resources']
//        }
//        compileClasspath += configurations.gatling
//    }
//}

task gatlingRun(type: JavaExec) {
    description = 'Run gatling tests'
    new File ("${buildDir}/reports/gatling").mkdirs()

//    classpath = sourceSets.simulations.runtimeClasspath + configurations.gatling

    main = "io.gatling.app.Gatling"
    args = ['-s', 'simulations.Adaptor.BasicAdaptorTestSimulation',
            '-sf', 'simulations/resources',
            '-df', 'simulations/resources',
            '-rf', "${buildDir}/reports/gatling"
    ]
}

task showConfigurations {
    doLast {
        configurations.all {conf -> println(conf)}
    }
}

repositories {
    mavenCentral()
}

task showRepos {
    doLast {
        println "All repos:"
        println repositories.collect { it.name }
    }
}


task nftBasicAdaptorTest(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'runner.GatlingRunnerWrapper'

    jvmArgs '-DdurationOfTest=1'
    jvmArgs '-DtargetEnvironment=local'
    jvmArgs '-Djava.net.preferIPv4Stack=true'
    jvmArgs '-XX:MaxMetaspaceSize=128m'

    maxHeapSize = "1G"

    args '-m'
    args '-nr'
    args '-bf', 'build/classes/scala/main'
    args '-rf', 'results'
    args '-s', 'simulations.Adaptor.BasicAdaptorTestSimulation'
}